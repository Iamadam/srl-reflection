const
  R_FORESTERID = 2458;

  R_ONETAIL_1 = 4277;
  R_ONETAIL_2 = 7445;
  R_TWOTAIL_1 = 13246;
  R_TWOTAIL_2 = 7446;
  R_THREETAIL_1 = 13248;
  R_THREETAIL_2 = 13247;
  R_FOURTAIL_1 = 13249;
  R_FOURTAIL_2 = 13250;

  R_MEAT_NAME = 'heasant';

  R_FORESTERPORTALID = 15645;

  R_FORESTER_DROPSLOT = 28;

Function r_ForesterPortal: Boolean; forward;

Function r_InForester: Boolean;
begin
  Result := ValidNullNPC(R_FORESTERID);
end;

Function r_ForesterWants: TVariantArray;
var
  S: String;
  i, Hi: Integer;
  strArr: TStringArray;
begin
  Result := [-1];

  while ClickContinue(False, False) do
  begin

    S := GetInterfaceText(242, 4);
    if Pos('kill', S) > 0 then
      Break;
    ClickContinue(True, True);
  end;

  if Pos('leave', S) > 0 then
  begin
    R_Debug('Pheasant already killed', 'Forester');
    r_ForesterPortal;
    exit;
  end;

  strArr := ['one', 'two', 'three', 'four'];
  Hi := High(strArr);
  for i := 0 to Hi do
    if Pos(strArr[i], S) > 0 then
    begin
      S := strArr[i];
      break;
    end;

  Case S of
    'one': Result := [R_ONETAIL_1, R_ONETAIL_2];
    'two': Result := [R_TWOTAIL_1, R_TWOTAIL_2];
    'three': Result := [R_THREETAIL_1, R_THREETAIL_2];
    'four': Result := [R_FOURTAIL_1, R_FOURTAIL_2];
  end;
  r_Debug('Going to look for ' + S + ' tailed pheasant!', 'Forester');
  ClickToContinue;
end;

Function r_FindForester: Boolean;
var
  NPC: TNPC;
  C: TPoint;
  iTime: Integer;
begin
  r_Debug('Finding Freaky forester..', 'Forester');

  iTime := GetSystemTime;
  Repeat
    NPC := GetNullNPC(R_FORESTERID);

    If Not TileOnMS(NPC.Tile, 0)then
    begin
      r_Debug('Tile not on MS' + ToStr(NPC.Tile) + ', walking there.', 'Forester');
      WalkToTile(NPC.Tile, 0, 0);
    end;

    C := TileToMS(NPC.Tile, 0);
    Mouse(C.X, C.Y, 5, 5, False);
    Result := WaitOption('alk-', 200+Random(100));

    If Result then
    begin
      r_Debug('Found Freaky forester!', 'Forester');
      Wait(2000+Random(1000));
      Flag;
      Exit;
    end;
  until(GetSystemTime-iTime > 30000);
  r_Debug('Took > 30 secs finding forester, result = false', 'Forester');
end;

function r_ForesterFight: boolean;
var
 T: Integer;
begin
  T := GetSystemTime + 4000;
  repeat
    wait(66)
    if (GetAnimation > -1) then
      Result := true;
  until Result or (GetSystemTime > T);
end;

Function r_ForesterKill(SeekFor: TVariantArray): Boolean;
var
  NPC: TNPC;
  C: TPoint;
  iTime, iTimeEx: Integer;
begin
  r_Debug('Finding pheasant..', 'Forester');
  iTime := GetSystemTime;
  Repeat
    NPC := GetNPCMulti(SeekFor);

    If (NPC = NULL_NPC) then
      Exit;

    If Not TileOnMS(NPC.Tile, 0)then
    begin
      r_Debug('Tile not on MS' + ToStr(NPC.Tile) + ', walking there.', 'Forester');
      WalkToTile(NPC.Tile, 0, 0);
      Exit;
    end;

    C := TileToMS(NPC.Tile, 0);
    Mouse(C.X, C.Y, 5, 5, False);
    Result := WaitOption('tack', 200+Random(100));

    If Result then
    begin
      r_Debug('Attacked pheasant!', 'Forester');
      Wait(2000+Random(500));
      Flag;
      iTimeEx := GetSystemTime;
      While (Not Pos('ollect', GetInterfaceText(241, 4)) > 0) do
      begin
        Wait(100+Random(100));
        If (GetSystemTime - iTimeEx > 6000)then
          Exit;
      end;

      r_Debug('Time to collect the raw pheasant!', 'Forester');
      Wait(3000+Random(500));
    end;
  until(Result)or(GetSystemTime-iTime > 60000)
end;

Function r_ForesterLastTalk: Boolean;
begin
  Result := False;
end;

Function r_ForesterPortal: Boolean;
var
  Obj: TRSObject;
  C, T: TPoint;
begin
  Obj := GetObjectByIDEx([R_FORESTERPORTALID], OBJECT_TYPE_INTERACTABLE, 30);
  If Not (Obj.ID = R_FORESTERPORTALID)then
  begin
    r_Debug('Problem finding leaving portal, result = false', 'Forester');
    Exit;
  end;

  If Not TileOnMS(Obj.Tile, 0)then
    WalkToTile(Obj.Tile, 0, 0);

  C := TileToMS(Obj.Tile, 0);
  MMouse(C.X, C.Y, 5, 5);
  Result := WaitUpText('ortal', 200+Random(100));

  GetMousePos(C.X, C.Y);
  Mouse(C.X, C.Y, 0, 0, Result);
  If Not Result then
    Result := WaitOption('nter', 200+Random(100));

  If Result then
  begin
    Wait(2000+Random(1000));
    R_Flag;

    Wait(1300 + Random(1000));
    if FindColor(T.X, T.Y, 2070783, 234, 46, 254, 56) then
      Mouse(172, 199, 100, 4, True);
    r_Debug('Successfully solved.', 'Forester');
  end;
end;

function r_ForesterDropItem(var Item: TDropItem): Boolean;
var
  InvItem: TInvItem;
  MeTile: TTile;
begin
  Result := False;
  if not LoggedIn then Exit;
  if not R_InvFull then Exit;

  InvItem := GetInvItemAt(R_FORESTER_DROPSLOT);
  if not (InvItem = NULL_INVITEM) then
  begin
    R_DropItem(InvItem.Slot);
    if R_ItemSlotExists(InvItem.Slot) then
    begin
      Result := False;
      R_Debug('Failed to drop item', 'Forester');
      Exit;
    end;
    MeTile := GetMyPos;
    Item := NewDropItem(InvItem.ID, InvItem.StackSize, MeTile, InvItem.Name);
  end;
  Result := not (Item = NULL_DROPITEM);
end;

function r_ForesterPickUp(Item: TDropItem): Boolean;
var
  T: TTile;
  P: TPoint;
begin
  Result := False;
  if not LoggedIn then Exit;

  if not (Item = NULL_DROPITEM) then
  begin
    T := Item.Tile;
    if not TileOnMS(T, 50) then
      if r_WebWalk(T) then R_Flag;
    P := TileToMS(T, 50);
    MMouse(P.x, P.y, 3, 3);
    Wait(RandomRange(80, 120));
    if OptionExists('Take ' + Item.Name) then
    begin
      GetMousePos(P.x, P.y);
      Mouse(P.x, P.y, 0, 0, False);
      if(R_ChooseOption('Take ' + Item.Name)) then
      begin
        R_Debug('Picking up ' + Item.Name, 'Forester');
        R_Flag;
        Wait(500+Random(500));
      end;
    end;
  end;
  Result := R_ItemSlotExists(R_FORESTER_DROPSLOT);
end;

Function r_SolveForester: Boolean;
var
  iTime: Integer;
  FWants: TVariantArray;
  Item: TDropItem;
  Dropped: Boolean;
begin
  Result := r_InForester;
  If Not Result then
    Exit;

  iTime := GetSystemTime;
  Repeat
    If Not r_FindForester then
      Exit
    else
      FWants := r_ForesterWants;
  Until(Length(FWants) > 0)or(GetSystemTime - iTime > 60000);

  If (FWants[0] < 1) then
    Exit;

  Item := NULL_DROPITEM;
  Dropped := r_ForesterDropItem(Item);
  if Dropped then
    R_Debug('Dropped: ' + Item.Name + ' at: ' + ToStr(Item.Tile), 'Forester');

  iTime := GetSystemTime;
  Repeat
    r_ForesterKill(FWants);
    If (GetSystemTime - iTime > 60000)then
    begin
      r_Debug('Took more than one minute to recive food!', 'Forester');
      Exit;
    end;
  Until(R_CountItem(R_MEAT_NAME) > 0);

  If Not r_FindForester then
    Exit;

  iTime := GetSystemTime;
  repeat
    if (GetSystemTime - iTime > 25000) then
    begin
      R_Debug('Failed to pickup: ' + Item.Name + ' at: ' + ToStr(Item.Tile), 'Forester');
      Exit;
    end;
    if r_ForesterPickUp(Item) then
    begin
      Dropped := False;
      R_Debug('Successfully picked up: ' + Item.Name + ' at: ' + ToStr(Item.Tile), 'Forester');
    end;
  until not Dropped;

  iTime := GetSystemTime;
  Repeat
    If (GetSystemTime - iTime > 30000)then
    begin
      r_Debug('Took more than 30 secs to leave!', 'Forester');
      Exit;
    end;
  Until(r_ForesterPortal);

  iTime := GetSystemTime;

  repeat
    If (GetSystemTime - iTime > 15000)then
    begin
      r_Debug('Took more than 15 secs to teleport out!', 'Forester');
      Exit;
    end;
  until (Not r_InForester)and(LoggedIn);

  Result := True;

end;
