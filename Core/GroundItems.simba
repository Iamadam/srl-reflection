//------------------------------------------------------------------\\
//--               Simba Reflection Library                       --||
//--                 Grounditems Routines                         --||
//------------------------------------------------------------------//

//---                                Records                                --//
type
{Holds information pertaining to a ground item}
  TGroundItem = record
    ID: Integer;
    Stack: Integer;
    Tile: TTile;
  end;

{Array of TGroundItem}
  TGroundItemArray = array of TGroundItem;

{?????}
  TCacheInfo = record
    Cache, Nodes, NLength: integer;
  end;

{*******************************************************************************
function NULL_GROUNDITEM: TGroundItem;
Description: Nulls a TGroundItem
*******************************************************************************}
function NULL_GROUNDITEM: TGroundItem;
begin
  with result do
  begin
    ID := NULL_INT;
    Tile := NULL_TILE;
    Stack := NULL_INT;
  end;
end;

function LoadCacheInfo(CachePath: String):TCacheInfo;
begin
  with Result do
  begin
    Cache := SmartGetFieldObject(0, CachePath);
    Nodes := SmartGetFieldObject(Cache, hook_nodecache_GetNodes);
    NLength := SmartGetFieldArraySize(Nodes, '', 1);
  end;
end;

procedure FreeCacheInfo(var Info: TCacheInfo);
begin
  SmartFreeObject(Info.Nodes);
  SmartFreeObject(Info.Cache);
  Info.Nodes := 0;
  Info.Cache := 0;
  Info.NLength := 0;
end;

{*******************************************************************************
function NewGroundItem(id, stack: integer; T: TTile): TGroundItem;
By: Drags111
Description: Returns a new instance of a TGroundItem
*******************************************************************************}
function NewGroundItem(id, stack: integer; T: TTile): TGroundItem;
begin
  Result.ID := ID;
  Result.Stack := Stack;
  Result.Tile := T;
end;



{*******************************************************************************
function GetItemsAt(T: TTile): TGroundItemArray;
By: Method
Description: Gets all the items on the tile.
*******************************************************************************}
function GetItemsAt(tile: TTile): TGroundItemArray;
var
  cache, hash, plane, nodes, size, index, tail, cur, next,
  uid, list, id, stack: Integer;
begin
  // grab the cache and calculate the tile's hash
  cache := SmartGetFieldObject(0, hook_static_GroundItemCache);
  plane := SmartGetFieldInt(0, hook_static_LoadedPlane);
  hash := tile.x or (tile.y shl 14) or (plane shl 28);

  // grab the nodes array and get the index where our item list
  // should be, if it exists
  nodes := SmartGetFieldObject(cache, hook_nodecache_GetNodes);
  size := SmartGetFieldArraySize(nodes, '', 1);
  index := hash and (size - 1);
  SmartFreeObject(cache);

  // get the dummy tail node of the current list and its successor
  // for use in the next loop
  tail := SmartGetFieldArrayObject(nodes, '', index);
  cur := SmartGetFieldObject(tail, hook_node_Next);
  SmartFreeObject(nodes);

  // loop until we come back to the dummy tail node
  // (the list is circular)
  while (not (SmartIsEqual(tail, cur))) do
  begin
    uid := SmartGetFieldLongL(cur, hook_node_GetID);
    if (uid = hash) then
    begin
      // if we have matching uids, grab the list and break
      list := SmartGetFieldObject(cur, hook_nodelistcache_GetNodeList);
      break;
    end;

    // otherwise, update our node
    next := SmartGetFieldObject(cur, hook_node_Next);
    SmartFreeObject(cur);
    cur := next;
  end;

  // free objects we're finished with
  SmartFreeObject(cur);
  SmartFreeObject(tail);

  // if we didn't find our list, there are no ground items on
  // this tile
  if (list = 0) then
    Exit;

  // grab pointers for the new list
  tail := SmartGetFieldObject(list, hook_nodelist_Head);
  cur := SmartGetFieldObject(tail, hook_node_Next);

  while (not (SmartIsEqual(tail, cur))) do
  begin
    // create a new ground item
    SetArrayLength(Result, GetArrayLength(Result) + 1);
    id := SmartGetFieldInt(cur, hook_item_GetID);
    stack := SmartGetFieldInt(cur, hook_item_GetStack);
    Result[High(Result)] := NewGroundItem(id, stack, tile);

    // update our pointers
    next := SmartGetFieldObject(cur, hook_node_Next);
    SmartFreeObject(cur);
    cur := next;
  end;

  // free remaining objects
  SmartFreeObject(cur);
  SmartFreeObject(tail);
  SmartFreeObject(list);
end;

{*******************************************************************************
function GetItemsNear(T: TTile): TGroundItemArray;
By: Naike
Description: Gets all the items near you. I suggest not going above 2.
1 = 3*3 -> 9 tiles                       [] [] []
2 = 5*5 -> 25 tiles                      [] You[]   <- GetItemsNear(1)
3 = 7*7 -> 49 tiles                      [] [] []
and so on..
*******************************************************************************}
function GetItemsNear(AreaFromMe: Integer): TGroundItemArray;
var
  I, II: Integer;
  MyPos: TPoint;
  t_GIA: TGroundItemArray;
begin
  If Not LoggedIn then
    Exit;

  MyPos := GetMyPos;

  For I:=0 to AreaFromMe*2 do
   For II:=0 to AreaFromMe*2 do
     t_GIA := GetItemsAt(Tile(MyPos.X-AreaFromMe+II, MyPos.Y-AreaFromMe+I));

  Result := t_GIA;
end;

{*******************************************************************************
function FindGroundItem(Item: TGroundItem): Boolean;
By: mormonman
Description: Returns true if the TGroundItem is found.
            (Tile, stacksize, and ID must all be the same).
*******************************************************************************}
function FindGroundItem(Item: TGroundItem): Boolean;
var
  Items: TGroundItemArray;
  i: Integer;
begin
  if not LoggedIn then Exit;

  Items := GetItemsAt(Item.Tile);
  if Length(Items) < 1 then Exit;
  for i := 0 to High(Items) do
    if Items[i] = Item then
    begin
      Result := True;
      Exit;
    end;
end;
